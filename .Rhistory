'Radius' = rep(min.rad, p),
'Frame' = 1:p,
'prog.vec' = temp.smooth$prog.vec)
}
dist.df <- do.call(rbind, dist.list)
TD.dat      <- subset(dist.df, IS.TD == TRUE)
TD.dat$Name <- factor(TD.dat$Name,
levels = unique(TD.dat$Name))
dist.plot <- ggplot(data = TD.dat  , aes(x = round(Frame / (25 * 60) , 2), y = Distance)) +
geom_point(size = 0.75, color = 'blue') + labs(color = "Progression") +
labs( y ="Distance (CM)" , x = "Min") +
theme_grey() +
theme(legend.text=element_text(size=16) , legend.position = 'none', axis.title=element_text(size=22)) +
geom_vline(aes(xintercept = Excursions / (25 * 60)) , size = 0.75) + scale_y_continuous(breaks = c(100, 300 ,500)) +
geom_hline(aes(yintercept = Radius))
NTD.dat <- subset(dist.df, IS.TD == FALSE)
NTD.dat$Name <- factor(NTD.dat$Name,
levels = unique(NTD.dat$Name))
dist.plot <- ggplot(data = NTD.dat  , aes(x = round(Frame / (25 * 60) , 2), y = Distance)) +
geom_point(size = 0.75, color = 'red') + labs(color = "Progression") +
labs(y ="Distance (CM)" , x = "Min") +
theme_grey() +
theme(legend.text=element_text(size = 14) , legend.position = 'none', axis.title=element_text(size = 22)) +
geom_vline(aes(xintercept = Excursions / (25 * 60) ) , size =0.75 ) + scale_y_continuous(breaks = c(100, 300 ,500)) +
geom_hline(aes(yintercept = Radius))
dist.plot + facet_grid(Name ~ .) + theme(strip.text.y = element_text(size =
### Adding the length of the session
parameter.DF[ ,'Length'] <- (parameter.DF$End - parameter.DF$Begin) / (25 * 60)
dist.df   <- left_join(dist.df, parameter.DF[ ,c('Name', 'Length')], by = 'Name')
#### Testing difference
test.mat <- dist.df %>%
select(Excursions, Name, IS.TD, Length) %>%
group_by(Name) %>%
dplyr::summarise('Number_Excursions' = sum(!is.na(Excursions)),
'Length_Min' = mean(Length),
'IS.TD'= mean(IS.TD)) %>%
dplyr::mutate('Number_Excursions_Per_Min' = Number_Excursions / Length_Min)
td.ex  <- test.mat %>% filter(IS.TD == TRUE) %>% select(Number_Excursions_Per_Min) %>% unlist()
ntd.ex <- test.mat %>% filter(IS.TD == FALSE) %>% select(Number_Excursions_Per_Min) %>% unlist()
wilcox.excursion.test <- wilcox.test(td.ex, ntd.ex)
abs.ex.diff <- abs(mean(td.ex) - mean(ntd.ex))
sd.ex <- (sd(td.ex)^2 * (length(td.ex) - 1) +
sd(ntd.ex)^2 * (length(ntd.ex) - 1)) /
(length(ntd.ex) + length(td.ex) - 2)
#### Building radius from mother and find % of time spent in that that radius
rad.vec <- seq(1, 120 ,1)
time.data.frame <- data.frame('Name'     = rep(NA, length(rad.vec) * 12),
'Distance' = rep(NA, length(rad.vec) * 12),
'Time.Spent'  = rep(NA, length(rad.vec) * 12),
'TD'    = rep(NA, length(rad.vec) * 12))
m <- 0
for (i in 1:nrow(parameter.DF)) {
temp.smooth   <- smooth.see.list[[i]]
temp.mom.cent <- center.list[[i]][['Mother']]
temp.dist.vec <- (temp.smooth$x - temp.mom.cent[1])^2 + (temp.smooth$y - temp.mom.cent[2])^2
p             <- nrow(temp.smooth)
for (j in 1:length(rad.vec)) {
m <- m + 1
spent.mom <- sum(temp.dist.vec <= rad.vec[j]^2)
time.data.frame[m,c('Name', 'TD')] <- c(parameter.DF$Name[i], parameter.DF[i,'IS.TD'])
time.data.frame[m,c('Distance', 'Time.Spent')] <- c(rad.vec[j],  spent.mom / p)
}
}
## Not Averaged
#### Time spent in radius from mother
time.data.frame.perm <- time.data.frame
x <- aggregate(Time.Spent ~ TD + Distance, time.data.frame, mean)
true.dist <- mean((subset(x, TD == TRUE)[,3] - subset(x, TD == FALSE)[,3])^2)
temp.dist <- NA
for (i in 1:1000){
time.data.frame.perm[,4] <- TRUE
time.data.frame.perm[time.data.frame.perm[,1] %in% sample(unique(parameter.DF$Name), 6),4] <- FALSE
x <- aggregate(Time.Spent ~ TD + Distance, time.data.frame.perm, mean)
temp.dist[i] <- mean((subset(x, TD == TRUE)[,3] - subset(x, TD == FALSE)[,3])^2)
}
p.val.mom.dist <- 1 - mean(true.dist > c(temp.dist, true.dist))
#### Excrursions  (defined as visit to radius from mother)
#### Creating data frame of time visit for each radius from 5 to 150 for each infant
rad.vec <- seq(1, 120 ,1)
vis.data.frame <- data.frame('Name'      = rep(NA, length(rad.vec) * 12),
'Distance' = rep(NA, length(rad.vec) * 12),
'Excursion'= rep(NA, length(rad.vec) * 12),
'TD'       = rep(NA, length(rad.vec) * 12))
m <- 0
for (i in 1:nrow(parameter.DF)) {
temp.smooth   <- smooth.see.list[[i]]
temp.mom.cent <- center.list[[i]][['Mother']]
p             <- nrow(temp.smooth)
for (j in 1:length(rad.vec)) {
m <- m + 1
visit.mom <- nrow(DoubleVisit(smooth.table = temp.smooth, center.coord = temp.mom.cent[1:2], rad.vec[j]))
vis.data.frame[m,c('Name', 'TD')] <- c(parameter.DF$Name[i], parameter.DF[i,'IS.TD'])
vis.data.frame[m,c('Distance', 'Excursion')] <- c(rad.vec[j],  ifelse(is.null(visit.mom), 0, visit.mom) )
}
}
vis.data.frame <- left_join(vis.data.frame, parameter.DF[ , c('Name', 'Length')])
vis.data.frame[ , 'Excursion'] <- vis.data.frame$Excursion / vis.data.frame$Length
vis.data.frame.perm <- vis.data.frame
x <- aggregate(Excursion ~ TD + Distance, vis.data.frame, mean)
true.ex <- mean((subset(x, TD == TRUE)[,3] - subset(x, TD == FALSE)[,3])^2)
temp.ex <- NA
for (i in 1:1000){
vis.data.frame.perm[,4] <- TRUE
vis.data.frame.perm[vis.data.frame.perm[,1] %in% sample(unique(parameter.DF$Name), 6),4] <- FALSE
x <- aggregate(Excursion ~ TD + Distance, vis.data.frame.perm, mean)
temp.ex[i] <- mean((subset(x, TD == TRUE)[,3] - subset(x, TD == FALSE)[,3])^2)
}
p.val.mom.excu <- 1 - mean(true.ex > c(temp.ex, true.ex))
## By Condition
cond.plot <- ggplot(time.data.frame, aes(x = Distance, y = Time.Spent, color = TD, group = Name)) +
geom_line(size = 1.25) +
ggtitle("Percent Time Spent Near Mother ") +
labs( y = "% Of Time", x ="Distance from mother (cm)") +
theme(text = element_text(size=22),
legend.position = c(0.1, 0.9),
legend.background = element_blank(),
legend.title = element_blank(),
legend.key.height = unit(0.5, "in"),
legend.key.width = unit(0.65, "in")) +
scale_colour_discrete(labels = c("NTD", "TD")) +
opts.perm
## Averaged
df.cover <- aggregate(Time.Spent ~ TD + Distance, time.data.frame, FUN = function(x) c('Percentage' = mean(x),                                                                           'SD' = sd(x)))
df.cover <- do.call(data.frame, df.cover)
colnames(df.cover) <- c('Group', 'Radius', 'Percentage_Covered', 'SD')
## With CI
CI.cover.plot <- ggplot(df.cover, aes(x = Radius, y = Percentage_Covered, color = Group)) + geom_line(size = 1.5) + geom_ribbon(aes(ymin = Percentage_Covered - 1.96 * sqrt(Percentage_Covered * (1 - Percentage_Covered) / 6), ymax = Percentage_Covered + 1.96 * sqrt(Percentage_Covered * (1 - Percentage_Covered) / 6), alpha = 0.05 , fill = Group), show.legend = FALSE) +  ggtitle("Average Percent Of Time Spent Near Mother") +
labs( y = "% Of Time", x ="Distance from mother (cm)")  + theme(text = element_text(size=22), legend.position = 'none') + opts.perm
## Not Averaged
## By Condition
vis.plot <- ggplot(vis.data.frame, aes(x = Distance, y = Excursion, color = TD, group = Name)) + geom_line(size = 1.25) + ggtitle("Number Of Visits Per Minute To Mother") +
labs( y = "Number Of Excursions Per Minute", x ="Distance from mother (cm)") + theme(text = element_text(size=22), legend.position = 'none') + opts.perm
## Averaged
df.visit <- aggregate(Excursion ~ TD + Distance, vis.data.frame, FUN = function(x) c('Visits' = mean(x),                                                                           'SD' = sd(x)))
df.visit <- do.call(data.frame, df.visit)
colnames(df.visit) <- c('Group', 'Radius', 'Visits', 'SD')
## With CI
CI.vis.plot <- ggplot(df.visit, aes(x = Radius, y = Visits, color = Group)) + geom_line(size = 1.5) + geom_ribbon(aes(ymin = Visits - 1.96 * SD * sqrt(1 / 6), ymax = Visits + 1.96 * SD * sqrt(1 / 6), alpha = 0.05 , fill = Group), show.legend = FALSE) +  ggtitle("Average Number Of Visits Per Minute To Mother") +
labs( y = "Number Of Excursions Per Minute", x ="Distance from mother (cm)")  +  theme(text = element_text(size=22), legend.position = 'none') + opts.perm
grid.arrange(cond.plot, CI.cover.plot, vis.plot, CI.vis.plot, layout_matrix = rbind(c(1,2),c(3,4)))
touch.list <- list()
for (i in 1:length(smooth.see.list)) {
temp.df        <- smooth.see.list[[i]]
temp.df        <- temp.df %>% mutate('Frames' = 1:nrow(temp.df))
temp.name      <- names(smooth.see.list)[i]
## Find Mom Center
## Touching
touch.list[[i]]<- data.frame('Name_Infant'   = parameter.DF[i, 'Name'],
'IS.TD'  = parameter.DF[i, 'IS.TD'],
'Frames' = 1:nrow(temp.df),
'Touch'  = temp.df[ ,'Touch'])
}
touch.df <- do.call('rbind', touch.list)
touch.df[touch.df[ ,'Touch'] == 0, 'Touch'] <- NA
touch.df <- touch.df %>%
mutate(Frame_Touch = Frames * Touch) %>%
dplyr::add_count(Name_Infant)
aggregate(Frames ~ Name_Infant , touch.df, max)
### Seperating the dataframe
touch.df.TD  <- touch.df %>% filter(IS.TD == TRUE)
touch.df.NTD <- touch.df %>% filter(IS.TD == FALSE)
### Plotting
## TD
# touch.df %>% ggplot(aes(y = 1, x = Frame_Touch, color = IS.TD)) +
#   geom_point(size = 2, color = 'blue') +
#   geom_vline(xintercept = n) +
#   facet_grid(Name ~ .)  +
#   theme(axis.title.y=element_blank(),
#         axis.text.y=element_blank(),
#         axis.ticks.y=element_blank(),
#         panel.spacing = unit(0, "lines")) +
#   ggtitle('Contact With Mother ~ Frames') + opts.perm
#
### Plotting
## TD
TD.touch.plot <- touch.df.TD %>% ggplot(aes(y = 1, x = Frame_Touch)) +
geom_point(size = 2, color = 'blue') +
geom_vline(aes(xintercept = n), size = 1.5) +
facet_grid(Name_Infant ~ .) + opts.perm +
theme(axis.title.x = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
axis.line = element_blank(),
panel.spacing = unit(0.75, "lines"),
strip.text = element_text(size = 8)) +
ylab('Touch') + xlab('')
## NTD
NTD.touch.plot <- touch.df.NTD %>% ggplot(aes(y = 1, x = Frame_Touch)) +
geom_point(size = 2, color = 'red') +
geom_vline(aes(xintercept = n), size = 1.5) +
facet_grid(Name_Infant ~ .) + opts.perm +
theme(axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
axis.line.y = element_blank(),
panel.spacing = unit(0.75, "lines"),
strip.text = element_text(size = 8)) +
xlab('Frames') +
ylab('Touch')
dat <- data.frame('x' = 1:6, 'y' = 1:6, 'type' = rep(c("TD", "NTD"), 3))
leg.plot <- ggplot(dat) + geom_line(aes(x = x, y = y, color = type)) +
scale_colour_manual(values = c("blue", "red"),
breaks = c("TD", "NTD"),
labels = c("TD", "NTD")) +
guides(colour = guide_legend(override.aes = list(size = 2),
direction = "horizontal",
title = element_blank())) +
theme(legend.key.width = unit(1.5, "cm"),
legend.text = element_text(size = 12))
full.legend <- get_legend(leg.plot)
line.plot <- ggplot(NULL) + geom_abline(slope = 0, intercept = 0.5, size = 3) + opts
null.plot <- ggplot(NULL) + opts
A=textGrob("a", gp=gpar(fontface="bold", fontsize = 24))
B=textGrob("b", gp=gpar(fontface="bold", fontsize = 24))
lay.mat <- rbind(c(1, rep(2, 11)),
t(replicate(8, c(6, rep(2, 11)))),
rep(3, 12),
c(4, rep(5, 11)),
t(replicate(8, c(6, rep(5, 11)))))
grid.arrange(A, TD.touch.plot , line.plot, B, NTD.touch.plot, null.plot, layout_matrix = lay.mat, padding = unit(0.1, "line"))
### Testing Number Of Excursions at 100 CM
vis.100 <- filter(vis.data.frame, Distance == 100)[,3]
### According to distance list
vis.dist <- unlist(lapply(dist.list, function(x) ifelse(all(is.na(x$Excursions)),
1, length(na.omit(unique(x$Excursions))))))
### Time Spent At Mother Vicinity
time.spent.100 <- filter(time.data.frame, Distance == 100)[,3]
### Testing Speed
speed.vec.with.ling <- unlist(lapply(smooth.see.list, function(df) mean(sqrt(df$v.x^2 + df$v.y^2))))
ProgSpeed <- function(df) {
df <- df[which(df$prog.vec == 1), ]
return(mean(sqrt(df$v.x^2 + df$v.y^2)))
}
speed.vec.only.prog <- unlist(lapply(smooth.see.list, ProgSpeed))
### Testing Room Coverage
cover.vec  <-  sapply(smooth.see.list, CountMap)
#cover.vec  <-  sapply(count.heat, function(x) sum(x[ ,3] > 0)) / parameter.DF$Length
touch.avg.temp <- NA; touch.num.temp <- NA; dist.temp <- NA; temp.ling <- NA; new.touch <- NA;
### Touches of Mother
for (i in 1:length(smooth.see.list)) {
temp.df        <- smooth.see.list[[i]]
temp.df        <- temp.df %>% mutate('Frames' = 1:nrow(temp.df))
temp.name      <- names(smooth.see.list)[i]
## Find Mom Center
## Touching
temp.touch            <- temp.df[ ,'Touch']
## Average touching throuhout session
touch.avg.temp[i]     <- mean(temp.touch)
## Number of toching
touch.num.temp[i]     <- nrow(Group(temp.df[as.logical(temp.touch), 'Frames']))
## Distance normalised outside mother 80CM
## Mom Location
temp.mom.cent     <- center.list[[i]][['Mother']][1:2]
out.mom.vec.100   <- sqrt((temp.df$x - temp.mom.cent[1])^2 + (temp.df$y - temp.mom.cent[2])^2) > 100
dist.temp[i] <- sum(sqrt(temp.df[out.mom.vec.100,'v.x']^2 + temp.df[out.mom.vec.100,'v.y']^2)) / sum(out.mom.vec.100)
## Lingering Normalized
temp.ling[i] <- sum(!temp.df$prog.vec) / nrow(temp.df)
}
### Segments to Mother
### Transformed data
test.df <- data.frame('Name' = parameter.DF$Name,
'Excursions.100.CM.Per.Minute' = sqrt(vis.100), ## Square root
'Time.Mother.Radius.100.CM' = Logit(time.spent.100), ## logit
'Speed.Prog' = speed.vec.only.prog,
'Avg.Cover' = Logit(cover.vec), ## logit  maybe can add time.spent.vec
'Speed.Outside.Mother.Radius.100.CM' = dist.temp,
'Touches.Num.Per.Min' = sqrt(touch.num.temp / parameter.DF$Length), ## square root
'Touches.Duration' = Logit(touch.avg.temp), ## logit
'TD' = parameter.DF[ ,'IS.TD'])
## Function to control string length
swr = function(string, nwrap=25) {
paste(strwrap(string, width=nwrap), collapse="\n")
}
### Original without transformations
org.test.df <- data.frame('Name' = parameter.DF$Name,
'Excursions.100.CM.Per.Minute' = (vis.100), ## Square root
'Time.Mother.Radius.100.CM' = Logit(time.spent.100), ## logit
'Speed.Prog' = speed.vec.only.prog,
'Avg.Cover' = (cover.vec), ## logit
'Speed.Outside.Mother.Radius.100.CM' = dist.temp,
'Touches.Num.Per.Min' = (touch.num.temp), ## square root
'Touches.Duration' = (touch.avg.temp), ## logit
'TD' = parameter.DF[ ,'IS.TD'])
p.vec      <- rep(NA, 6)
diff.vec   <- rep(NA, 6)
W.vec      <- rep(NA, 6)
effect.vec <- rep(NA, 6)
sd.vec     <- rep(NA, 6)
name.vec   <- rep(NA, 6)
for (i in 2:8) {
x.td  <- test.df[test.df['TD'] == TRUE, i]
x.ntd <- test.df[test.df['TD'] == FALSE, i]
temp.test  <- wilcox.test(x.td, x.ntd, exact = TRUE)
sd.vec[i-1]     <- sqrt((sd(x.td)^2 * (length(x.td) - 1) + sd(x.ntd)^2 * (length(x.ntd) - 1)) /
(length(x.td) + length(x.ntd) - 2))
p.vec[i-1]      <- temp.test$p.value
W.vec[i-1]      <- temp.test$statistic
diff.vec[i-1]   <- abs(mean(x.td) - mean(x.ntd))
effect.vec[i-1] <- diff.vec[i-1] / sd.vec[i-1]
name.vec[i -1]  <- colnames(test.df[i])
}
p.vec.adj    <- p.adjust(p.vec, 'BH')
names(p.vec) <- colnames(test.df[ ,2:8])
k <- length(p.vec)
box.df <- test.df %>%
select(-Name) %>%
plyr::rename(c('Excursions.100.CM.Per.Minute' = paste('Sqrt Number of \n Excursions Per Minute 100 (cm) \n P =', round(p.vec[1], 4)),
'Time.Mother.Radius.100.CM' = paste('Logit % of Time \n Near Mother 100 (cm) \n P =', round(p.vec[2], 4)),
'Speed.Prog' = paste('Progression Speed (cm/sec) \n P =', round(p.vec[3], 4)),
'Avg.Cover' = paste('Logit % Room Covered \n P =', round(p.vec[4], 4)),
'Touches.Num.Per.Min' = paste('Sqrt # \n Contact Episodes Normalized \n  P =', round(p.vec[6], 4)),
'Touches.Duration' = paste('Logit % \n Of Contact Time \n  P =', round(p.vec[7], 4)),
'Speed.Outside.Mother.Radius.100.CM' = paste('Speed (cm/sec) outside of \n mother\'s vicinity 100 (cm) \n  P =', round(p.vec[5], 4)))) %>%
melt(id.var = 'TD')
box.df[,'TD'] <- factor(box.df[,'TD'], levels = c('TRUE', 'FALSE'))
ggplot(box.df, aes(y = value, x = variable, color = TD, fill = TD, group = TD)) +
geom_boxplot(alpha = 0.25, notch = FALSE) +
geom_dotplot() +
ggtitle("") +
scale_fill_manual(values = c('blue', 'red'), labels = c("TD", "NTD")) +
scale_color_manual(values = c('blue', 'red'), labels = c("TD", "NTD")) +
labs( y = "", x = "") +
facet_wrap( ~ variable, scales = 'free', ncol = 4)+
opts.perm +
theme(strip.text = element_text(size = 16),
plot.title = element_text(size = 22),
legend.text = element_text(size = 16),
axis.text.x = element_blank(),
legend.title = element_blank(),
legend.key.height = unit(0.85, "in"),
legend.key.width = unit(0.85, "in"),
legend.position = c(0.8, 0.35))
# legend.position = 'bottom')
ggplot(box.df, aes(y = value, x = variable, color = TD, fill = TD, group = TD)) +
geom_boxplot(alpha = 0.25, notch = FALSE) +
ggtitle("") +
scale_fill_manual(values = c('blue', 'red'), labels = c("TD", "NTD")) +
scale_color_manual(values = c('blue', 'red'), labels = c("TD", "NTD")) +
labs( y = "", x = "") +
facet_wrap( ~ variable, scales = 'free', ncol = 4)+
opts.perm +
theme(strip.text = element_text(size = 16),
plot.title = element_text(size = 22),
legend.text = element_text(size = 16),
axis.text.x = element_blank(),
legend.title = element_blank(),
legend.key.height = unit(0.85, "in"),
legend.key.width = unit(0.85, "in"),
legend.position = c(0.8, 0.35))
# legend.position = 'bottom')
ggplot(box.df, aes(y = value, x = variable, color = TD, fill = TD, group = TD)) +
geom_boxplot(alpha = 0.25, notch = FALSE) +
geom_point()+
ggtitle("") +
scale_fill_manual(values = c('blue', 'red'), labels = c("TD", "NTD")) +
scale_color_manual(values = c('blue', 'red'), labels = c("TD", "NTD")) +
labs( y = "", x = "") +
facet_wrap( ~ variable, scales = 'free', ncol = 4)+
opts.perm +
theme(strip.text = element_text(size = 16),
plot.title = element_text(size = 22),
legend.text = element_text(size = 16),
axis.text.x = element_blank(),
legend.title = element_blank(),
legend.key.height = unit(0.85, "in"),
legend.key.width = unit(0.85, "in"),
legend.position = c(0.8, 0.35))
# legend.position = 'bottom')
ggplot(box.df, aes(y = value, x = variable, color = TD, fill = TD, group = TD)) +
geom_boxplot(alpha = 0.25, notch = FALSE) +
geom_point(aes(x = group)) +
ggtitle("") +
scale_fill_manual(values = c('blue', 'red'), labels = c("TD", "NTD")) +
scale_color_manual(values = c('blue', 'red'), labels = c("TD", "NTD")) +
labs( y = "", x = "") +
facet_wrap( ~ variable, scales = 'free', ncol = 4)+
opts.perm +
theme(strip.text = element_text(size = 16),
plot.title = element_text(size = 22),
legend.text = element_text(size = 16),
axis.text.x = element_blank(),
legend.title = element_blank(),
legend.key.height = unit(0.85, "in"),
legend.key.width = unit(0.85, "in"),
legend.position = c(0.8, 0.35))
# legend.position = 'bottom')
ggplot(box.df, aes(y = value, x = variable, color = TD, fill = TD, group = TD)) +
geom_boxplot(alpha = 0.25, notch = FALSE) +
geom_point(aes(x = group)) +
ggtitle("") +
scale_fill_manual(values = c('blue', 'red'), labels = c("TD", "NTD")) +
scale_color_manual(values = c('blue', 'red'), labels = c("TD", "NTD")) +
labs( y = "", x = "") +
facet_wrap( ~ variable, scales = 'free', ncol = 4)+
opts.perm +
theme(strip.text = element_text(size = 16),
plot.title = element_text(size = 22),
legend.text = element_text(size = 16),
axis.text.x = element_blank(),
legend.title = element_blank(),
legend.key.height = unit(0.85, "in"),
legend.key.width = unit(0.85, "in"),
legend.position = c(0.8, 0.35))
# legend.position = 'bottom')
### Plotting the boxplots
ggplot(box.df, aes(y = value, x = variable, color = TD, fill = TD, group = TD)) +
geom_boxplot(alpha = 0.25, notch = FALSE) +
geom_point(aes(x = TD)) +
ggtitle("") +
scale_fill_manual(values = c('blue', 'red'), labels = c("TD", "NTD")) +
scale_color_manual(values = c('blue', 'red'), labels = c("TD", "NTD")) +
labs( y = "", x = "") +
facet_wrap( ~ variable, scales = 'free', ncol = 4)+
opts.perm +
theme(strip.text = element_text(size = 16),
plot.title = element_text(size = 22),
legend.text = element_text(size = 16),
axis.text.x = element_blank(),
legend.title = element_blank(),
legend.key.height = unit(0.85, "in"),
legend.key.width = unit(0.85, "in"),
legend.position = c(0.8, 0.35))
### Plotting the boxplots
ggplot(box.df, aes(y = value, x = variable, color = TD, fill = TD, group = TD)) +
geom_boxplot(alpha = 0.25, notch = FALSE) +
geom_point(aes(x = 0.5 * TD)) +
ggtitle("") +
scale_fill_manual(values = c('blue', 'red'), labels = c("TD", "NTD")) +
scale_color_manual(values = c('blue', 'red'), labels = c("TD", "NTD")) +
labs( y = "", x = "") +
facet_wrap( ~ variable, scales = 'free', ncol = 4)+
opts.perm +
theme(strip.text = element_text(size = 16),
plot.title = element_text(size = 22),
legend.text = element_text(size = 16),
axis.text.x = element_blank(),
legend.title = element_blank(),
legend.key.height = unit(0.85, "in"),
legend.key.width = unit(0.85, "in"),
legend.position = c(0.8, 0.35))
### Plotting the boxplots
ggplot(box.df, aes(y = value, x = variable, color = TD, fill = TD, group = TD)) +
geom_boxplot(alpha = 0.25, notch = FALSE) +
geom_point(aes(x = 0.5 * as.numeric(TD))) +
ggtitle("") +
scale_fill_manual(values = c('blue', 'red'), labels = c("TD", "NTD")) +
scale_color_manual(values = c('blue', 'red'), labels = c("TD", "NTD")) +
labs( y = "", x = "") +
facet_wrap( ~ variable, scales = 'free', ncol = 4)+
opts.perm +
theme(strip.text = element_text(size = 16),
plot.title = element_text(size = 22),
legend.text = element_text(size = 16),
axis.text.x = element_blank(),
legend.title = element_blank(),
legend.key.height = unit(0.85, "in"),
legend.key.width = unit(0.85, "in"),
legend.position = c(0.8, 0.35))
### Plotting the boxplots
ggplot(box.df, aes(y = value, x = variable, color = TD, fill = TD, group = TD)) +
geom_boxplot(alpha = 0.25, notch = FALSE) +
geom_point(aes(x = as.numeric(TD) - 0.5 )) +
ggtitle("") +
scale_fill_manual(values = c('blue', 'red'), labels = c("TD", "NTD")) +
scale_color_manual(values = c('blue', 'red'), labels = c("TD", "NTD")) +
labs( y = "", x = "") +
facet_wrap( ~ variable, scales = 'free', ncol = 4)+
opts.perm +
theme(strip.text = element_text(size = 16),
plot.title = element_text(size = 22),
legend.text = element_text(size = 16),
axis.text.x = element_blank(),
legend.title = element_blank(),
legend.key.height = unit(0.85, "in"),
legend.key.width = unit(0.85, "in"),
legend.position = c(0.8, 0.35))
### Plotting the boxplots
ggplot(box.df, aes(y = value, x = variable, color = TD, fill = TD, group = TD)) +
geom_boxplot(alpha = 0.25, notch = FALSE) +
geom_point(position = position_dodge(width=0.75))
ggtitle("") +
scale_fill_manual(values = c('blue', 'red'), labels = c("TD", "NTD")) +
scale_color_manual(values = c('blue', 'red'), labels = c("TD", "NTD")) +
labs( y = "", x = "") +
facet_wrap( ~ variable, scales = 'free', ncol = 4)+
opts.perm +
theme(strip.text = element_text(size = 16),
plot.title = element_text(size = 22),
legend.text = element_text(size = 16),
axis.text.x = element_blank(),
legend.title = element_blank(),
legend.key.height = unit(0.85, "in"),
legend.key.width = unit(0.85, "in"),
legend.position = c(0.8, 0.35))
# legend.position = 'bottom')
### Plotting the boxplots
ggplot(box.df, aes(y = value, x = variable, color = TD, fill = TD, group = TD)) +
geom_boxplot(alpha = 0.25, notch = FALSE) +
geom_point(position = position_dodge(width=0.75)) +
ggtitle("") +
scale_fill_manual(values = c('blue', 'red'), labels = c("TD", "NTD")) +
scale_color_manual(values = c('blue', 'red'), labels = c("TD", "NTD")) +
labs( y = "", x = "") +
facet_wrap( ~ variable, scales = 'free', ncol = 4)+
opts.perm +
theme(strip.text = element_text(size = 16),
plot.title = element_text(size = 22),
legend.text = element_text(size = 16),
axis.text.x = element_blank(),
legend.title = element_blank(),
legend.key.height = unit(0.85, "in"),
legend.key.width = unit(0.85, "in"),
legend.position = c(0.8, 0.35))
