temp.plot <- temp.plot + geom_path(data = circleFun(r = rad.vec[i]),
aes(x,y),
color = 'grey', size = 0.75)
}
temp.plot <- temp.plot  + geom_segment(aes(x = Dist * sin(Angle),
y = Dist * cos(Angle),
xend = rad.choice * sin(Angle),
yend = rad.choice * cos(Angle),
group = ID, colour = Obj)
, size = 2) +
geom_path(aes(x = Dist * sin(Angle), y = Dist * cos(Angle)),
size = 2,
arrow = arrow(length = unit(0.03, "npc"))) +
## Adding Arrow
geom_segment(aes(x = Dist[1] * sin(Angle[1]),
y = Dist[1] * cos(Angle[1]),
xend = Dist[250] * sin(Angle[250]),
yend = Dist[250] * cos(Angle[250])),
size = 2,
arrow = arrow(length = unit(0.03, "npc"))) +
scale_colour_manual(values = cols, name = 'Temp')
temp.plot +  coord_fixed(ratio = 1) +
opts +  annotate("text",
y = seq(-12,-122,-20), x = rep(0,6),
label = paste0('R = ', seq(10,120,20)), col = 'black', size = 6) +
## Points for radiuses
geom_point(data = data.frame('x'= rep(0,6), 'y' = seq(-10,-120,-20)),
aes(x = x, y = y)) +
## Segments indicating the amount of time
annotate("segment",
x = c(0,0,0),
xend = c(0),
y = c(0),
yend = c(120),
colour = "black", size = 1.5, linetype = 3) +
annotate("text",
y = c(128, 120 * cos(ang.vec[round(0.65 * n)]) - 15, 120 * cos(ang.vec[round(0.95 * n)]) + 8),
x = c(25, 120 * sin(ang.vec[round(0.65 * n)]) - 1, 120 * sin(ang.vec[round(0.95 * n)]) - 10),
label = c("0% of session", "65% of session", "95% of session"), size = 6) +
theme(text = element_text(size=20))
# Chunk 6
for (j in 1:nrow(parameter.DF)) {
temp.smooth <- smooth.see.list[[j]]
mom.cent    <- center.list[[j]][['Mother']][1:2]
mom.rad     <- center.list[[j]][['Mother']][3]
## Plotting
dist.vec    <- sqrt((temp.smooth$x - mom.cent[1])^2 + (temp.smooth$y - mom.cent[2])^2)
ang.vec     <- ((1:nrow(temp.smooth)) / nrow(temp.smooth)) * 2 * pi
# dist.vec    <- pmax(0,dist.vec) # Removing the radius of mother, so it is distance from the edge
## Creating Arcs
arc.df <- data.frame('ID' = 1:nrow(temp.smooth),
'Angle' = ang.vec,
'Dist' = dist.vec,
'Obj' = factor('Mother', levels = obj.names))
arc.df <- arc.df %>% dplyr::filter(Dist < max(rad.vec))
temp.plot <- ggplot(arc.df)
for (i in 1:length(rad.vec)) {
temp.plot <- temp.plot + geom_path(data = circleFun(r = rad.vec[i]),
aes(x,y),
color = 'grey', size = 0.75)
}
temp.plot <- temp.plot  + geom_segment(aes(x = Dist * sin(Angle),
y = Dist * cos(Angle),
xend = max(rad.vec) * sin(Angle),
yend = max(rad.vec) * cos(Angle),
group = ID, colour = Obj)
, size = 2) +
scale_colour_manual(values = cols)
plot.list[[j]] <- temp.plot +
coord_fixed(ratio = 1) +
labs(caption =  paste0(parameter.DF$Name[j])) + theme(plot.caption = element_text(hjust=0.5, size = 12), legend.box = 'vertical')
}
# Chunk 7
TD.int.plot <- grid.arrange(plot.list[[3]] + opts, plot.list[[5]] + opts, plot.list[[6]] + opts,
plot.list[[8]] + opts, plot.list[[9]] + opts , plot.list[[11]] + opts,
padding = unit(0.1, "line"),
layout_matrix=rbind(c(1,2,3), c(4,5,6)))
NTD.int.plot <- grid.arrange(plot.list[[1]] + opts, plot.list[[2]] + opts, plot.list[[4]] + opts,
plot.list[[7]] + opts, plot.list[[10]] + opts, plot.list[[12]] + opts,
padding = unit(0.1, "line"),
layout_matrix=rbind(c(1,2,3), c(4,5,6)))
line.plot <- ggplot(NULL) + geom_abline(slope = 0, intercept = 0.5, size = 3) + opts
null.plot <- ggplot(NULL) + opts
A=textGrob("NTD", gp=gpar(fontface="bold", fontsize = 24))
B=textGrob("TD", gp=gpar(fontface="bold", fontsize = 24))
#
# lay.mat <- rbind(c(1, rep(2, 11)),
#                  t(replicate(8, c(6, rep(2, 11)))),
#                  rep(3, 12),
#                  c(4, rep(5, 11)),
#                  t(replicate(8, c(6, rep(5, 11)))))
# Chunk 8: Figure 3 - Interaction plots (only mother)
MatMake <- function(x, num) {matrix(x, ncol = num, nrow = num)}
#grid.arrange(A, TD.int.plot, line.plot, B, NTD.int.plot, null.plot, layout_matrix = lay.mat, padding = unit(0.1, "line"))
lay.mat <- cbind(MatMake(1, 4), MatMake(2, 4), MatMake(3, 4))
lay.mat <- rbind(lay.mat, (lay.mat + 3),
rep(7, 9),
(lay.mat + 7), (lay.mat + 11), (lay.mat + 14))
grid.arrange(B, plot.list[[3]] + opts, plot.list[[5]] + opts,
plot.list[[6]] + opts, plot.list[[8]] + opts, plot.list[[11]] + opts,
line.plot,
A, null.plot, plot.list[[1]] + opts, plot.list[[2]] + opts, plot.list[[4]] + opts,
plot.list[[7]] + opts, plot.list[[9]] + opts, plot.list[[10]] + opts,
plot.list[[12]] + opts,
padding = unit(0.1, "line"), layout_matrix = lay.mat)
# Chunk 9
# Intializing
rad.vec <- seq(1, 120,1)
plot.list <- list()
arc.df.list <- list()
plot.heat.list <- list()
for (j in 1:nrow(parameter.DF)) {
temp.smooth <- smooth.see.list[[j]]
temp.cent   <- center.list[[j]]
ang.vec     <- ((1:nrow(temp.smooth)) / nrow(temp.smooth)) * 2 * pi
## Calculating for each object center the time the infants spent near it
for (l in 1:length(temp.cent)) {
obj.name <- names(temp.cent[l])
## Finding Distance From Object
dist.vec    <- sqrt((temp.smooth$x - temp.cent[[l]][1])^2 + (temp.smooth$y - temp.cent[[l]][2])^2)
## Find name and fit to factor
## Fixed Distance vector
arc.df <- data.frame('ID' = 1:nrow(temp.smooth),
'Angle' = ang.vec,
'Dist' = dist.vec,
'Obj' = obj.name)
arc.df <- arc.df %>% dplyr::filter(Dist < max(rad.vec))
arc.df.list[[l]] <- arc.df
}
arc.df <- do.call('rbind', arc.df.list)
temp.plot <- ggplot(arc.df)
for (i in 1:length(rad.vec)) {
temp.plot <- temp.plot + geom_path(data = circleFun(r = rad.vec[i]),
aes(x,y),
color = 'grey', size = 0.75)
}
if (nrow(arc.df) != 0) {
arc.df[,'Obj'] <- factor(arc.df[,'Obj'], levels = obj.names)
temp.plot <- temp.plot  + geom_segment(aes(x = Dist * sin(Angle),
y = Dist * cos(Angle),
xend = max(rad.vec) * sin(Angle),
yend = max(rad.vec) * cos(Angle),
group = factor(paste(ID, Obj)), colour = Obj)
,size = 2)
}
plot.list[[j]] <- temp.plot +
scale_colour_manual(values = cols, name = element_blank(), drop = FALSE) +
coord_fixed(ratio = 1) +
theme(legend.text = element_text(size = 14),
legend.key.height = unit(0.5, "in"), legend.key.width = unit(0.75, "in")) +
guides(colour = guide_legend(override.aes = list(size = 5))) +
labs(caption = paste0(parameter.DF$Name[j])) +
theme(plot.caption = element_text(hjust=0.5, size = 16), legend.box = 'vertical')
}
## Creating plot for legend
# legend.plot <- ggplot(data.frame()) + geom_point() + scale_colour_manual(values = cols, labels = c(obj.names), name = 'Legend', drop = FALSE)
full.legend <- get_legend(plot.list[[9]])
# Chunk 10
### Arranging plots
TD.int.plot <- grid.arrange(plot.list[[3]] + opts, plot.list[[5]] + opts, plot.list[[6]] + opts,
plot.list[[8]] + opts, plot.list[[9]] + opts , plot.list[[11]] + opts,
padding = unit(0.1, "line"),
layout_matrix=rbind(c(1,2,3), c(4,5,6)))
NTD.int.plot <- grid.arrange(plot.list[[1]] + opts, plot.list[[2]] + opts, plot.list[[4]] + opts,
plot.list[[7]] + opts, plot.list[[10]] + opts, plot.list[[12]] + opts,
padding = unit(0.1, "line"),
layout_matrix=rbind(c(1,2,3), c(4,5,6)))
line.plot <- ggplot(NULL) + geom_abline(slope = 0, intercept = 0.5, size = 3) + opts
null.plot <- ggplot(NULL) + opts
A=textGrob("NTD", gp=gpar(fontface="bold", fontsize = 24))
B=textGrob("TD", gp=gpar(fontface="bold", fontsize = 24))
lay.mat <- cbind(MatMake(1, 4), MatMake(2, 4), MatMake(3, 4))
lay.mat <- rbind(lay.mat, (lay.mat + 3),
rep(7, 9),
(lay.mat + 7), (lay.mat + 11), (lay.mat + 14))
#
# lay.mat <- rbind(c(1, rep(2, 11)),
#                  t(replicate(8, c(6, rep(2, 11)))),
#                  rep(3, 12),
#                  c(4, rep(5, 11)),
#                  t(replicate(8, c(6, rep(5, 11)))),
#                  rep(7, 12))
# Chunk 11: Figure 4 - Interaction plots (full)
#grid.arrange(A, TD.int.plot, line.plot, B, NTD.int.plot, null.plot, full.legend, layout_matrix = lay.mat, padding = unit(0.1, "line"))
grid.arrange(B, plot.list[[3]] + opts, plot.list[[5]] + opts,
plot.list[[6]] + opts, plot.list[[8]] + opts, plot.list[[11]] + opts,
line.plot,
A, full.legend, plot.list[[1]] + opts, plot.list[[2]] + opts, plot.list[[4]] + opts,
plot.list[[7]] + opts, plot.list[[9]] + opts, plot.list[[10]] + opts,
plot.list[[12]] + opts,
padding = unit(0.1, "line"), layout_matrix = lay.mat)
# Chunk 12: distance from mother opt3
dist.list      <- list()
plot.dist.list <- list()
for (j in 1:nrow(parameter.DF)) {
temp.mom.cent <- center.list[[j]][['Mother']][1:2]
temp.smooth   <- smooth.see.list[[j]]
p             <- nrow(temp.smooth)
temp.td       <- parameter.DF[j,'IS.TD']
rad.vec       <- seq(30, 120, 1)
## All visits to the object
visit.vec     <- sapply(sapply(rad.vec, DoubleVisit,
center.coord = temp.mom.cent,
smooth.table = temp.smooth), nrow)
ex.num.tab    <- Group(which(diff(visit.vec) == 0))
min.rad       <- rad.vec[ex.num.tab[which.max(ex.num.tab[ ,2] - ex.num.tab[ ,1]), 1]]
## Plotting
## Finding Excursions
dist.vec   <- sqrt((temp.smooth$x - temp.mom.cent[1])^2 + (temp.smooth$y - temp.mom.cent[2])^2)
temp.visit <- DoubleVisit(temp.mom.cent, temp.smooth, s.rad = min.rad)
draw.ex <- rep(NA, p)
draw.ex[apply(temp.visit, 1, FindMin, dist.vec = dist.vec)] <- apply(temp.visit, 1, FindMin, dist.vec = dist.vec)
dist.list[[j]] <- data.frame('IS.TD' = rep(temp.td, p) ,
'Name' = rep(parameter.DF$Name[j], p),
'Distance' = dist.vec,
'Excursions' = draw.ex,
'Radius' = rep(min.rad, p),
'Frame' = 1:p,
'prog.vec' = temp.smooth$prog.vec)
}
dist.df <- do.call(rbind, dist.list)
# Chunk 13: Figure 5 a - Distance mother TD
TD.dat      <- subset(dist.df, IS.TD == TRUE)
TD.dat$Name <- factor(TD.dat$Name,
levels = unique(TD.dat$Name))
dist.plot <- ggplot(data = TD.dat  , aes(x = round(Frame / (25 * 60) , 2), y = Distance)) +
geom_point(size = 0.75, color = 'blue') + labs(color = "Progression") +
labs( y ="Distance (cm)" , x = "Min") +
theme_grey() +
theme(legend.text=element_text(size=16) , legend.position = 'none', axis.title=element_text(size=22)) +
geom_vline(aes(xintercept = Excursions / (25 * 60)) , size = 0.75) + scale_y_continuous(breaks = c(100, 300 ,500)) +
geom_hline(aes(yintercept = Radius))
dist.plot + facet_grid(Name ~ .) + theme(strip.text.y = element_text(size = 22),
plot.title = element_text(size = 22))
# Chunk 14: Figure 5 b - distance mother NTD
NTD.dat <- subset(dist.df, IS.TD == FALSE)
NTD.dat$Name <- factor(NTD.dat$Name,
levels = unique(NTD.dat$Name))
dist.plot <- ggplot(data = NTD.dat  , aes(x = round(Frame / (25 * 60) , 2), y = Distance)) +
geom_point(size = 0.75, color = 'red') + labs(color = "Progression") +
labs(y ="Distance (cm)" , x = "Min") +
theme_grey() +
theme(legend.text=element_text(size = 14) , legend.position = 'none', axis.title=element_text(size = 22)) +
geom_vline(aes(xintercept = Excursions / (25 * 60) ) , size =0.75 ) + scale_y_continuous(breaks = c(100, 300 ,500)) +
geom_hline(aes(yintercept = Radius))
dist.plot + facet_grid(Name ~ .) + theme(strip.text.y = element_text(size = 22),
plot.title = element_text(size = 22))
# Chunk 15: Testing the difference in excursions
### Adding the length of the session
parameter.DF[ ,'Length'] <- (parameter.DF$End - parameter.DF$Begin) / (25 * 60)
dist.df   <- left_join(dist.df, parameter.DF[ ,c('Name', 'Length')], by = 'Name')
#### Testing difference
test.mat <- dist.df %>%
select(Excursions, Name, IS.TD, Length) %>%
group_by(Name) %>%
dplyr::summarise('Number_Excursions' = sum(!is.na(Excursions)),
'Length_Min' = mean(Length),
'IS.TD'= mean(IS.TD)) %>%
dplyr::mutate('Number_Excursions_Per_Min' = Number_Excursions / Length_Min)
td.ex  <- test.mat %>% filter(IS.TD == TRUE) %>% select(Number_Excursions_Per_Min) %>% unlist()
ntd.ex <- test.mat %>% filter(IS.TD == FALSE) %>% select(Number_Excursions_Per_Min) %>% unlist()
wilcox.excursion.test <- wilcox.test(td.ex, ntd.ex)
abs.ex.diff <- abs(mean(td.ex) - mean(ntd.ex))
sd.ex <- (sd(td.ex)^2 * (length(td.ex) - 1) +
sd(ntd.ex)^2 * (length(ntd.ex) - 1)) /
(length(ntd.ex) + length(td.ex) - 2)
kable(data.frame('Test' = '# Of Excursions Per Minute',
'Wilcoxon p-value' =  wilcox.excursion.test$p.value,
'Abs Difference' = (abs.ex.diff) ,
'Statistic' = wilcox.excursion.test$statistic,
'SD' = sqrt(sd.ex),
'Effect Size' =  (abs.ex.diff)  / sqrt(sd.ex)), row.names = FALSE)
# Chunk 16: time spent
#### Building radius from mother and find % of time spent in that that radius
rad.vec <- seq(1, 120 ,1)
time.data.frame <- data.frame('Name'     = rep(NA, length(rad.vec) * 12),
'Distance' = rep(NA, length(rad.vec) * 12),
'Time.Spent'  = rep(NA, length(rad.vec) * 12),
'TD'    = rep(NA, length(rad.vec) * 12))
m <- 0
for (i in 1:nrow(parameter.DF)) {
temp.smooth   <- smooth.see.list[[i]]
temp.mom.cent <- center.list[[i]][['Mother']]
temp.dist.vec <- (temp.smooth$x - temp.mom.cent[1])^2 + (temp.smooth$y - temp.mom.cent[2])^2
p             <- nrow(temp.smooth)
for (j in 1:length(rad.vec)) {
m <- m + 1
spent.mom <- sum(temp.dist.vec <= rad.vec[j]^2)
time.data.frame[m,c('Name', 'TD')] <- c(parameter.DF$Name[i], parameter.DF[i,'IS.TD'])
time.data.frame[m,c('Distance', 'Time.Spent')] <- c(rad.vec[j],  spent.mom / p)
}
}
## Not Averaged
# Chunk 17
#### Time spent in radius from mother
time.data.frame.perm <- time.data.frame
x <- aggregate(Time.Spent ~ TD + Distance, time.data.frame, mean)
true.dist <- mean((subset(x, TD == TRUE)[,3] - subset(x, TD == FALSE)[,3])^2)
temp.dist <- NA
for (i in 1:1000){
time.data.frame.perm[ ,4] <- TRUE
time.data.frame.perm[time.data.frame.perm[,1] %in% sample(unique(parameter.DF$Name), sum(!parameter.DF$IS.TD)) ,4] <- FALSE
x <- aggregate(Time.Spent ~ TD + Distance, time.data.frame.perm, mean)
temp.dist[i] <- mean((subset(x, TD == TRUE)[,3] - subset(x, TD == FALSE)[,3])^2)
}
p.val.mom.dist <- 1 - mean(true.dist > c(temp.dist, true.dist))
#### Excrursions  (defined as visit to radius from mother)
#### Creating data frame of time visit for each radius from 5 to 150 for each infant
rad.vec <- seq(1, 120 ,1)
vis.data.frame <- data.frame('Name'      = rep(NA, length(rad.vec) * 12),
'Distance' = rep(NA, length(rad.vec) * 12),
'Excursion'= rep(NA, length(rad.vec) * 12),
'TD'       = rep(NA, length(rad.vec) * 12))
m <- 0
for (i in 1:nrow(parameter.DF)) {
temp.smooth   <- smooth.see.list[[i]]
temp.mom.cent <- center.list[[i]][['Mother']]
p             <- nrow(temp.smooth)
for (j in 1:length(rad.vec)) {
m <- m + 1
visit.mom <- nrow(DoubleVisit(smooth.table = temp.smooth, center.coord = temp.mom.cent[1:2], rad.vec[j]))
vis.data.frame[m,c('Name', 'TD')] <- c(parameter.DF$Name[i], parameter.DF[i,'IS.TD'])
vis.data.frame[m,c('Distance', 'Excursion')] <- c(rad.vec[j],  ifelse(is.null(visit.mom), 0, visit.mom) )
}
}
vis.data.frame <- left_join(vis.data.frame, parameter.DF[ , c('Name', 'Length')])
vis.data.frame[ , 'Excursion'] <- vis.data.frame$Excursion / vis.data.frame$Length
vis.data.frame.perm <- vis.data.frame
x <- aggregate(Excursion ~ TD + Distance, vis.data.frame, mean)
true.ex <- mean((subset(x, TD == TRUE)[,3] - subset(x, TD == FALSE)[,3])^2)
temp.ex <- NA
for (i in 1:1000){
vis.data.frame.perm[,4] <- TRUE
vis.data.frame.perm[vis.data.frame.perm[,1] %in% sample(unique(parameter.DF$Name), sum(!parameter.DF$IS.TD)),4] <- FALSE
x <- aggregate(Excursion ~ TD + Distance, vis.data.frame.perm, mean)
temp.ex[i] <- mean((subset(x, TD == TRUE)[,3] - subset(x, TD == FALSE)[,3])^2)
}
p.val.mom.excu <- 1 - mean(true.ex > c(temp.ex, true.ex))
# Chunk 18: Figure S1 a
## By Condition
cond.plot <- ggplot(time.data.frame, aes(x = Distance, y = Time.Spent, color = TD, group = Name)) +
geom_line(size = 1.25) +
ggtitle("Proportion of time spent near mother") +
labs( y = "Proportion of time", x = "Distance from mother (cm)") +
theme(text = element_text(size=22),
legend.position = c(0.1, 0.9),
legend.background = element_blank(),
legend.title = element_blank(),
legend.key.height = unit(0.5, "in"),
legend.key.width = unit(0.65, "in")) +
scale_colour_discrete(labels = c("NTD", "TD")) +
opts.perm
## Averaged
df.cover <- aggregate(Time.Spent ~ TD + Distance, time.data.frame,
FUN = function(x) c('Percentage' = mean(x),                                                                             'SD' = sd(x)))
df.cover <- do.call(data.frame, df.cover)
df.cover <- df.cover %>%
mutate('SD' = case_when(TD == TRUE  ~ 2 * Time.Spent.SD / sum(parameter.DF$IS.TD),
TD == FALSE ~ 2 * Time.Spent.SD / (nrow(parameter.DF) - sum(parameter.DF$IS.TD))))
colnames(df.cover) <- c('Group', 'Radius', 'Percentage_Covered', 'SD')
## With CI
CI.cover.plot <- ggplot(df.cover, aes(x = Radius, y = Percentage_Covered, color = Group)) + geom_line(size = 1.5) + geom_ribbon(aes(ymin = Percentage_Covered - SD, ymax = Percentage_Covered + SD, alpha = 0.05 , fill = Group), show.legend = FALSE) +  ggtitle("Average proportion of time spent near mother") +
labs( y = "Proportion of time", x = "Distance from mother (cm)")  + theme(text = element_text(size=22), legend.position = 'none') + opts.perm
## Not Averaged
## By Condition
vis.plot <- ggplot(vis.data.frame, aes(x = Distance, y = Excursion, color = TD, group = Name)) + geom_line(size = 1.25) + ggtitle("Number of excursions \n to mother per minute") +
labs( y = "Number of excursions per minute", x = "Distance from mother (cm)") + theme(text = element_text(size=22), legend.position = 'none') + opts.perm
## Averaged
df.visit <- aggregate(Excursion ~ TD + Distance, vis.data.frame,
FUN = function(x) c('Visits' = mean(x), 'SD' = 1.96 *sd(x)))
df.visit <- do.call(data.frame, df.visit)
df.visit <- df.visit %>%
mutate('SD' = case_when(TD == TRUE  ~ 2 * Excursion.SD / sum(parameter.DF$IS.TD),
TD == FALSE ~ 2 * Excursion.SD / (nrow(parameter.DF) - sum(parameter.DF$IS.TD))))
colnames(df.visit) <- c('Group', 'Radius', 'Visits', 'SD', 'Full.SD')
## With CI
CI.vis.plot <- ggplot(df.visit, aes(x = Radius, y = Visits, color = Group)) + geom_line(size = 1.5) + geom_ribbon(aes(ymin = Visits - Full.SD, ymax = Visits + Full.SD, alpha = 0.05 , fill = Group), show.legend = FALSE) +  ggtitle("Average number of excursions \n to mother per minute") +
labs( y = "Number of excursions per minute", x ="Distance from mother (cm)")  +  theme(text = element_text(size=22), legend.position = 'none') + opts.perm
#grid.arrange(cond.plot, CI.cover.plot, vis.plot, CI.vis.plot, layout_matrix = rbind(c(1,2),c(3,4)))
cowplot::plot_grid(cond.plot, CI.cover.plot, vis.plot, CI.vis.plot, nrow = 2, ncol = 2, labels = c('a','b','c','d'), label_size = 18)
# Chunk 19
kable(data.frame('Tests' = c('% Near mother ~ radius', '# Excursions per minute ~ Radius'),
'Distance between mean curves' = c(sqrt(true.dist), sqrt(true.ex)),
'Permutation P-value' = c(p.val.mom.dist, p.val.mom.excu),
'Adjusted BH' = p.adjust(c(p.val.mom.dist, p.val.mom.excu), 'BH')))
#
# print(paste('Distance between mean curves is', sqrt(true.dist), 'P-value of permutation test (Distance) is ',p.val.mom.dist))
# print(paste('Distance between mean curves is', sqrt(true.ex), 'P-value of permutation test (Excursions) is ',p.val.mom.excu))
# Chunk 20: Figure 6
touch.list <- list()
for (i in 1:length(smooth.see.list)) {
temp.df        <- smooth.see.list[[i]]
temp.df        <- temp.df %>% mutate('Frames' = 1:nrow(temp.df))
temp.name      <- names(smooth.see.list)[i]
## Find Mom Center
## Touching
touch.list[[i]]<- data.frame('Name_Infant' = parameter.DF[i, 'Name'],
'IS.TD'  = parameter.DF[i, 'IS.TD'],
'Frames' = 1:nrow(temp.df),
'Touch'  = temp.df[ ,'Touch'])
}
touch.df <- do.call('rbind', touch.list)
touch.df[touch.df[ ,'Touch'] == 0, 'Touch'] <- NA
touch.df <- touch.df %>%
mutate(Frame_Touch = Frames * Touch) %>%
dplyr::add_count(Name_Infant)
aggregate(Frames ~ Name_Infant , touch.df, max)
### Seperating the dataframe
touch.df.TD  <- touch.df %>% filter(IS.TD == TRUE)
touch.df.NTD <- touch.df %>% filter(IS.TD == FALSE)
### Plotting
## TD
# touch.df %>% ggplot(aes(y = 1, x = Frame_Touch, color = IS.TD)) +
#   geom_point(size = 2, color = 'blue') +
#   geom_vline(xintercept = n) +
#   facet_grid(Name ~ .)  +
#   theme(axis.title.y=element_blank(),
#         axis.text.y=element_blank(),
#         axis.ticks.y=element_blank(),
#         panel.spacing = unit(0, "lines")) +
#   ggtitle('Contact With Mother ~ Frames') + opts.perm
#
### Plotting
## TD
TD.touch.plot <- touch.df.TD %>% ggplot(aes(y = 1, x = Frame_Touch)) +
geom_point(size = 2, color = 'blue') +
geom_vline(aes(xintercept = n), size = 1.5) +
facet_grid(Name_Infant ~ .) + opts.perm +
theme(axis.title.x = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
axis.line = element_blank(),
panel.spacing = unit(0.75, "lines"),
strip.text = element_text(size = 8)) +
ylab('Touch') + xlab('')
## NTD
NTD.touch.plot <- touch.df.NTD %>% ggplot(aes(y = 1, x = Frame_Touch)) +
geom_point(size = 2, color = 'red') +
geom_vline(aes(xintercept = n), size = 1.5) +
facet_grid(Name_Infant ~ .) + opts.perm +
theme(axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
axis.line.y = element_blank(),
panel.spacing = unit(0.75, "lines"),
strip.text = element_text(size = 8)) +
xlab('Frames') +
ylab('Touch')
dat <- data.frame('x' = 1:6, 'y' = 1:6, 'type' = rep(c("TD", "NTD"), 3))
leg.plot <- ggplot(dat) + geom_line(aes(x = x, y = y, color = type)) +
scale_colour_manual(values = c("blue", "red"),
breaks = c("TD", "NTD"),
labels = c("TD", "NTD")) +
guides(colour = guide_legend(override.aes = list(size = 2),
direction = "horizontal",
title = element_blank())) +
theme(legend.key.width = unit(1.5, "cm"),
legend.text = element_text(size = 12))
full.legend <- get_legend(leg.plot)
line.plot <- ggplot(NULL) + geom_abline(slope = 0, intercept = 0.5, size = 3) + opts
null.plot <- ggplot(NULL) + opts
A=textGrob("a", gp=gpar(fontface="bold", fontsize = 24))
B=textGrob("b", gp=gpar(fontface="bold", fontsize = 24))
lay.mat <- rbind(c(1, rep(2, 11)),
t(replicate(8, c(6, rep(2, 11)))),
rep(3, 12),
c(4, rep(5, 11)),
t(replicate(8, c(6, rep(5, 11)))))
grid.arrange(A, TD.touch.plot , line.plot, B, NTD.touch.plot, null.plot, layout_matrix = lay.mat, padding = unit(0.1, "line"))
MatMake <- function(x, num) {matrix(x, ncol = num, nrow = num)}
#grid.arrange(A, TD.int.plot, line.plot, B, NTD.int.plot, null.plot, layout_matrix = lay.mat, padding = unit(0.1, "line"))
lay.mat <- cbind(MatMake(1, 4), MatMake(2, 4), MatMake(3, 4))
lay.mat <- rbind(lay.mat, (lay.mat + 3),
rep(7, 9),
(lay.mat + 7), (lay.mat + 11), (lay.mat + 14))
grid.arrange(B, plot.list[[3]] + opts, plot.list[[5]] + opts,
plot.list[[6]] + opts, plot.list[[8]] + opts, plot.list[[11]] + opts,
line.plot,
A, null.plot, plot.list[[1]] + opts, plot.list[[2]] + opts, plot.list[[4]] + opts,
plot.list[[7]] + opts, plot.list[[9]] + opts, plot.list[[10]] + opts,
plot.list[[12]] + opts,
padding = unit(0.1, "line"), layout_matrix = lay.mat)
for (j in 1:nrow(parameter.DF)) {
temp.smooth <- smooth.see.list[[j]]
mom.cent    <- center.list[[j]][['Mother']][1:2]
mom.rad     <- center.list[[j]][['Mother']][3]
## Plotting
dist.vec    <- sqrt((temp.smooth$x - mom.cent[1])^2 + (temp.smooth$y - mom.cent[2])^2)
ang.vec     <- ((1:nrow(temp.smooth)) / nrow(temp.smooth)) * 2 * pi
# dist.vec    <- pmax(0,dist.vec) # Removing the radius of mother, so it is distance from the edge
## Creating Arcs
arc.df <- data.frame('ID' = 1:nrow(temp.smooth),
'Angle' = ang.vec,
'Dist' = dist.vec,
'Obj' = factor('Mother', levels = obj.names))
arc.df <- arc.df %>% dplyr::filter(Dist < max(rad.vec))
temp.plot <- ggplot(arc.df)
for (i in 1:length(rad.vec)) {
temp.plot <- temp.plot + geom_path(data = circleFun(r = rad.vec[i]),
aes(x,y),
color = 'grey', size = 0.75)
}
temp.plot <- temp.plot  + geom_segment(aes(x = Dist * sin(Angle),
y = Dist * cos(Angle),
xend = max(rad.vec) * sin(Angle),
yend = max(rad.vec) * cos(Angle),
group = ID, colour = Obj)
, size = 2) +
scale_colour_manual(values = cols)
plot.list[[j]] <- temp.plot +
coord_fixed(ratio = 1) +
labs(caption =  paste0(parameter.DF$Name[j])) + theme(plot.caption = element_text(hjust=0.5, size = 12), legend.box = 'vertical')
}
